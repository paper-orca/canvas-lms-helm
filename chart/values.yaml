# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

image:
  repository: ulevitsky/canvas-lms
  pullPolicy: IfNotPresent
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: canvas-lms

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # allowPrivilegeEscalation: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  timeoutSeconds: 10
  periodSeconds: 60
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  timeoutSeconds: 10
  periodSeconds: 60

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}
tolerations: []
affinity: {}

# Dependency config
postgresql:
  fullnameOverride: postgresql
  enabled: true
  auth:
    postgresPassword: password

redis:
  fullnameOverride: redis
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  replica:
    replicaCount: 1

# Init containers
initContainers:
  init-db:
    command:
    - "bin/rails"
    - "db:create"
    - "db:migrate"
  init-setup:
    command:
    - "bin/rails"
    - "db:initial_setup"
    - "brand_configs:generate_and_upload_all"

# App config
config:
  init: true
  host: localhost:3000
  security:
    encryptionKey: sample-encryption-key
  setup:
    admin:
      email: me@example.com
      password: password
    accountName: Acme Corp.
    statsCollection: opt_out
  database:
    host: postgresql
    name: canvas
    username: postgres
    password: password
  redis:
    url: redis://redis-master
  storage:
    files:
      request: 5Gi
      className: standard
    log:
      request: 1Gi
      className: standard
    brandableCss:
      request: 50Mi
      className: standard

configFiles:
  cache_store.yml: |
    production:
      cache_store: redis_cache_store
  database.yml: |
    production:
      adapter: postgresql
      host: <%= ENV.fetch("DATABASE_HOST") %>
      database: <%= ENV.fetch("DATABASE_NAME") %>
      username: <%= ENV.fetch("DATABASE_USERNAME") %>
      password: <%= ENV.fetch("DATABASE_PASSWORD") %>
      prepared_statements: false
  delayed_jobs.yml: |
    default:
      workers:
      - queue: canvas_queue
  file_store.yml: |
    production:
      storage: local
      path_prefix: tmp/files
  redis.yml: |
    production:
      url: <%= ENV.fetch("REDIS_URL") %>
      connect_timeout: 0.5
      circuit_breaker:
        error_threshold: 1
        error_timeout: 2
  security.yml: |
    production:
      encryption_key: <%= ENV.fetch("ENCRYPTION_KEY") %>
  environments__production-local.rb: |
    config.force_ssl = false
